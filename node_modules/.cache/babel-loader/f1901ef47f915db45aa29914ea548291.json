{"ast":null,"code":"import { Delaunay } from \"d3-delaunay\";\n\nonmessage = event => {\n  const {\n    data: {\n      data,\n      width,\n      height,\n      n\n    }\n  } = event;\n  const points = new Float64Array(n * 2);\n  const c = new Float64Array(n * 2);\n  const s = new Float64Array(n); // Initialize the points using rejection sampling.\n\n  for (let i = 0; i < n; ++i) {\n    for (let j = 0; j < 30; ++j) {\n      const x = points[i * 2] = Math.floor(Math.random() * width);\n      const y = points[i * 2 + 1] = Math.floor(Math.random() * height);\n      if (Math.random() < data[y * width + x]) break;\n    }\n  }\n\n  const delaunay = new Delaunay(points);\n  const voronoi = delaunay.voronoi([0, 0, width, height]);\n\n  for (let k = 0; k < 80; ++k) {\n    // Compute the weighted centroid for each Voronoi cell.\n    c.fill(0);\n    s.fill(0);\n\n    for (let y = 0, i = 0; y < height; ++y) {\n      for (let x = 0; x < width; ++x) {\n        const w = data[y * width + x];\n        i = delaunay.find(x + 0.5, y + 0.5, i);\n        s[i] += w;\n        c[i * 2] += w * (x + 0.5);\n        c[i * 2 + 1] += w * (y + 0.5);\n      }\n    } // Relax the diagram by moving points to the weighted centroid.\n    // Wiggle the points a little bit so they don’t get stuck.\n\n\n    const w = Math.pow(k + 1, -0.8) * 10;\n\n    for (let i = 0; i < n; ++i) {\n      const x0 = points[i * 2],\n            y0 = points[i * 2 + 1];\n      const x1 = s[i] ? c[i * 2] / s[i] : x0,\n            y1 = s[i] ? c[i * 2 + 1] / s[i] : y0;\n      points[i * 2] = x0 + (x1 - x0) * 1.8 + (Math.random() - 0.5) * w;\n      points[i * 2 + 1] = y0 + (y1 - y0) * 1.8 + (Math.random() - 0.5) * w;\n    }\n\n    postMessage(points);\n    voronoi.update();\n  }\n\n  close();\n};","map":{"version":3,"sources":["/Users/user/Documents/GitHub/ourViewSeoul/src/App/Worker.js"],"names":["Delaunay","onmessage","event","data","width","height","n","points","Float64Array","c","s","i","j","x","Math","floor","random","y","delaunay","voronoi","k","fill","w","find","pow","x0","y0","x1","y1","postMessage","update","close"],"mappings":"AAAA,SAAQA,QAAR,QAAuB,aAAvB;;AAEAC,SAAS,GAAGC,KAAK,IAAI;AACnB,QAAM;AAACC,IAAAA,IAAI,EAAE;AAACA,MAAAA,IAAD;AAAOC,MAAAA,KAAP;AAAcC,MAAAA,MAAd;AAAsBC,MAAAA;AAAtB;AAAP,MAAmCJ,KAAzC;AACA,QAAMK,MAAM,GAAG,IAAIC,YAAJ,CAAiBF,CAAC,GAAG,CAArB,CAAf;AACA,QAAMG,CAAC,GAAG,IAAID,YAAJ,CAAiBF,CAAC,GAAG,CAArB,CAAV;AACA,QAAMI,CAAC,GAAG,IAAIF,YAAJ,CAAiBF,CAAjB,CAAV,CAJmB,CAMnB;;AACA,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,CAApB,EAAuB,EAAEK,CAAzB,EAA4B;AAC1B,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwB,EAAEA,CAA1B,EAA6B;AAC3B,YAAMC,CAAC,GAAGN,MAAM,CAACI,CAAC,GAAG,CAAL,CAAN,GAAgBG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBZ,KAA3B,CAA1B;AACA,YAAMa,CAAC,GAAGV,MAAM,CAACI,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAN,GAAoBG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBX,MAA3B,CAA9B;AACA,UAAIS,IAAI,CAACE,MAAL,KAAgBb,IAAI,CAACc,CAAC,GAAGb,KAAJ,GAAYS,CAAb,CAAxB,EAAyC;AAC1C;AACF;;AAED,QAAMK,QAAQ,GAAG,IAAIlB,QAAJ,CAAaO,MAAb,CAAjB;AACA,QAAMY,OAAO,GAAGD,QAAQ,CAACC,OAAT,CAAiB,CAAC,CAAD,EAAI,CAAJ,EAAOf,KAAP,EAAcC,MAAd,CAAjB,CAAhB;;AAEA,OAAK,IAAIe,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwB,EAAEA,CAA1B,EAA6B;AAE3B;AACAX,IAAAA,CAAC,CAACY,IAAF,CAAO,CAAP;AACAX,IAAAA,CAAC,CAACW,IAAF,CAAO,CAAP;;AACA,SAAK,IAAIJ,CAAC,GAAG,CAAR,EAAWN,CAAC,GAAG,CAApB,EAAuBM,CAAC,GAAGZ,MAA3B,EAAmC,EAAEY,CAArC,EAAwC;AACtC,WAAK,IAAIJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,KAApB,EAA2B,EAAES,CAA7B,EAAgC;AAC9B,cAAMS,CAAC,GAAGnB,IAAI,CAACc,CAAC,GAAGb,KAAJ,GAAYS,CAAb,CAAd;AACAF,QAAAA,CAAC,GAAGO,QAAQ,CAACK,IAAT,CAAcV,CAAC,GAAG,GAAlB,EAAuBI,CAAC,GAAG,GAA3B,EAAgCN,CAAhC,CAAJ;AACAD,QAAAA,CAAC,CAACC,CAAD,CAAD,IAAQW,CAAR;AACAb,QAAAA,CAAC,CAACE,CAAC,GAAG,CAAL,CAAD,IAAYW,CAAC,IAAIT,CAAC,GAAG,GAAR,CAAb;AACAJ,QAAAA,CAAC,CAACE,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAD,IAAgBW,CAAC,IAAIL,CAAC,GAAG,GAAR,CAAjB;AACD;AACF,KAb0B,CAe3B;AACA;;;AACA,UAAMK,CAAC,GAAGR,IAAI,CAACU,GAAL,CAASJ,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAjB,IAAwB,EAAlC;;AACA,SAAK,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,CAApB,EAAuB,EAAEK,CAAzB,EAA4B;AAC1B,YAAMc,EAAE,GAAGlB,MAAM,CAACI,CAAC,GAAG,CAAL,CAAjB;AAAA,YAA0Be,EAAE,GAAGnB,MAAM,CAACI,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAArC;AACA,YAAMgB,EAAE,GAAGjB,CAAC,CAACC,CAAD,CAAD,GAAOF,CAAC,CAACE,CAAC,GAAG,CAAL,CAAD,GAAWD,CAAC,CAACC,CAAD,CAAnB,GAAyBc,EAApC;AAAA,YAAwCG,EAAE,GAAGlB,CAAC,CAACC,CAAD,CAAD,GAAOF,CAAC,CAACE,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAD,GAAeD,CAAC,CAACC,CAAD,CAAvB,GAA6Be,EAA1E;AACAnB,MAAAA,MAAM,CAACI,CAAC,GAAG,CAAL,CAAN,GAAgBc,EAAE,GAAG,CAACE,EAAE,GAAGF,EAAN,IAAY,GAAjB,GAAuB,CAACX,IAAI,CAACE,MAAL,KAAgB,GAAjB,IAAwBM,CAA/D;AACAf,MAAAA,MAAM,CAACI,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAN,GAAoBe,EAAE,GAAG,CAACE,EAAE,GAAGF,EAAN,IAAY,GAAjB,GAAuB,CAACZ,IAAI,CAACE,MAAL,KAAgB,GAAjB,IAAwBM,CAAnE;AACD;;AAEDO,IAAAA,WAAW,CAACtB,MAAD,CAAX;AACAY,IAAAA,OAAO,CAACW,MAAR;AACD;;AAEDC,EAAAA,KAAK;AACN,CAhDD","sourcesContent":["import {Delaunay} from \"d3-delaunay\";\n\nonmessage = event => {\n  const {data: {data, width, height, n}} = event;\n  const points = new Float64Array(n * 2);\n  const c = new Float64Array(n * 2);\n  const s = new Float64Array(n);\n\n  // Initialize the points using rejection sampling.\n  for (let i = 0; i < n; ++i) {\n    for (let j = 0; j < 30; ++j) {\n      const x = points[i * 2] = Math.floor(Math.random() * width);\n      const y = points[i * 2 + 1] = Math.floor(Math.random() * height);\n      if (Math.random() < data[y * width + x]) break;\n    }\n  }\n\n  const delaunay = new Delaunay(points);\n  const voronoi = delaunay.voronoi([0, 0, width, height]);\n\n  for (let k = 0; k < 80; ++k) {\n\n    // Compute the weighted centroid for each Voronoi cell.\n    c.fill(0);\n    s.fill(0);\n    for (let y = 0, i = 0; y < height; ++y) {\n      for (let x = 0; x < width; ++x) {\n        const w = data[y * width + x];\n        i = delaunay.find(x + 0.5, y + 0.5, i);\n        s[i] += w;\n        c[i * 2] += w * (x + 0.5);\n        c[i * 2 + 1] += w * (y + 0.5);\n      }\n    }\n\n    // Relax the diagram by moving points to the weighted centroid.\n    // Wiggle the points a little bit so they don’t get stuck.\n    const w = Math.pow(k + 1, -0.8) * 10;\n    for (let i = 0; i < n; ++i) {\n      const x0 = points[i * 2], y0 = points[i * 2 + 1];\n      const x1 = s[i] ? c[i * 2] / s[i] : x0, y1 = s[i] ? c[i * 2 + 1] / s[i] : y0;\n      points[i * 2] = x0 + (x1 - x0) * 1.8 + (Math.random() - 0.5) * w;\n      points[i * 2 + 1] = y0 + (y1 - y0) * 1.8 + (Math.random() - 0.5) * w;\n    }\n\n    postMessage(points);\n    voronoi.update();\n  }\n\n  close();\n};"]},"metadata":{},"sourceType":"module"}